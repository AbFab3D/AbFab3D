//
// maker of polyhedra compounds 
//
// author Vladimir Bulatov
//
var TAU = (Math.sqrt(5)+1)/2; // golden ratio 
var PI = Math.PI; 

// returns plane via 3 points (v1, 0, v2)
// external normal points in the direction from where points are ordered  counter clockwise 
function getPlane(v1,v2){
	var n = new Vector3d();
	n.cross(v2,v1);
	n.normalize();
	return ReflectionSymmetry.getPlane(n, 0);
	
}


	
function getIcosahedralSymmetry( ){


    var v5 = new Vector3d(1,0,TAU); // vertex of icosahedron 
    var v3 = new Vector3d(0,1/TAU,TAU); // vertex of dodecahedron 
    var p35 = new Vector3d(); // normal to plane via (0, v3, v5)
	
	p35.cross(v3, v5); 
	p35.normalize();
	
    var splanes = new Array();
	var count = 0;
	splanes[count++] = new ReflectionSymmetry.getPlane(new Vector3d(-1,0,0), 0.);
    splanes[count++] = new ReflectionSymmetry.getPlane(new Vector3d(0,-1,0), 0.);
	splanes[count++] = new ReflectionSymmetry.getPlane(p35, 0.);
	
	return new ReflectionSymmetry(splanes);
	
}

function getSphereBend(fixedRadius, bendAmount, offset){
	
	var center = fixedRadius*fixedRadius/bendAmount;
	var radius = Math.sqrt(center*center + fixedRadius*fixedRadius);
		
    var cp = new CompositeTransform();
    cp.add(new PlaneReflection(new Vector3d(0,0,1), new Vector3d(0,0,offset)));
    cp.add(new SphereInversion(new Vector3d(0,0,-center + offset), radius));
    return cp;
}


// rhombic triacontahedron 
function getRTC(radius, thickness){

	var s = radius/Math.sqrt(1 + 1./(TAU*TAU));
    var v5 = new Vector3d(s/TAU,0,s); // vertex of icosahedron 
    var v3 = new Vector3d(0,s/(TAU*TAU),s); // vertex of dodecahedron 

	var union = new Union();
	union.add(new Cylinder(v3, v5, thickness/2));	
	union.add(new Sphere(v3, thickness/2));	
	union.add(new Sphere(v5, thickness/2));	
	
	union.setTransform(getIcosahedralSymmetry());
	var rtc = new DataTransformer();
	rtc.setSource(union);
	
	return rtc;
	
}

function getImage(radius, thickness, path){

	var s = radius/Math.sqrt(1 + 1./(TAU*TAU));
    var v5 = new Vector3d(s/TAU,0,s); // vertex of icosahedron 
    var v3 = new Vector3d(0,s/(TAU*TAU),s); // vertex of dodecahedron 

	//var box = new Box(radius, radius, thickness, 0,0,s);
	var union = new Union();

	//union.add(new Sphere(v5, thickness/2));	
	//union.add(new Sphere(v3, thickness/2));	
	//union.add(new Cylinder(v3, v5, thickness/2));
	var correction = 1.05; // correection to get
	var ypnt = v3.y*correction;
	var xpnt = v5.x;
	var box = new Box(v5.x, v3.y*correction, thickness);
	var image = new Image3D(path, xpnt, ypnt, thickness);
	image.setBaseThickness(0);
	var vs = 0.1*MM;
	image.setVoxelSize(vs);
	image.setUseGrayscale(false);
	image.setBlurWidth(vs);
	image.setTransform(new Translation(xpnt/2,ypnt/2,v5.z));
	
	//union.add(box);
	union.add(image);
	
	union.setTransform(getSphereBend(v5.x, radius - v5.z, v5.z));
	//union.setTransform(new Rotation(0,1,0,PI/10));
	
	var dt = new DataTransformer();
	dt.setSource(union);
	return dt;
}
	
function main(arg){

	var radius = 20*MM;	
	var thickness = 1.2*MM;	
	var voxelSize = 0.1*MM;
	var a = radius + 2*thickness;
		
	var path = arg[0];
	var trans;
	var part;
	
	part = getRTC(radius, thickness); 
	var image = getImage(radius,thickness, path);
		
	var union = new Union();
	//union.add(part);
	
	union.add(image);
	union.setTransform(getIcosahedralSymmetry( ));
    var maker = new GridMaker();
	
	maker.setSource(union);
	
	var dest = createGrid(-a,a,-a,a,-a,a,voxelSize);
	
	maker.makeGrid(dest);
	
	return dest;
	
}
