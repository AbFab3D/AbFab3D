var voxelSize = 0.1*MM;

function makePart(size){
  
  var bs = size;
  var grid = createGrid(-bs, size+bs, -bs, size+bs, -size/2-bs, size/2+bs, voxelSize);
  var s = new Sphere(new Vector3d(size/2, size/2,size/2), size*0.6);
  
  var m1 = new GridMaker();
  m1.setSource(s);
  m1.makeGrid(grid);
  var gm = new GridMipMap(grid);
  gm.setScalingType(GridMipMap.SCALING_AVERAGE);
  var inter = new Intersection();
  inter.add(new Box(size/2,size/2,size/2, 2*size,2*size,2*size));
  inter.add(gm);
  return inter;
}


function main(){

	var width = 50*MM;
	var height = 50*MM;
	var period = width/8;
	var radius = period * 0.55;

	var thickness = width/4;	
	
	
	var grid = createGrid(-width/2,width/2,-height/2,height/2,-thickness/2,thickness/2,voxelSize);
	var symm = new ReflectionSymmetry();
	var splanes = new Array();
	var count = 0;
	splanes[count++] = new ReflectionSymmetry.getPlane(new Vector3d(1,0,0),0);
	splanes[count++] = new ReflectionSymmetry.getPlane(new Vector3d(0,1,0),0);
	
    if(true){
		var p1 = period;
		var R = width*0.33; 
		//var R = width*0.25; 
	
		var r1 = (R*R - p1*p1)/(2*p1);
		var c1 = r1 + p1;
		
		splanes[count++] =  new ReflectionSymmetry.getSphere(new Vector3d(c1,0,0),-r1);
    }
    if(true){
      var p3 = period;
      var cosalpha = Math.cos(Math.PI/3);
      var r3 = (c1*c1 - r1*r1 + p3*p3)/(2*(r1*cosalpha - p3));
      var c3 = r3+p3;		
      splanes[count++] = new ReflectionSymmetry.getSphere(new Vector3d(0,c3,0),-r3);
    }

    symm.setGroup(splanes);
	
	var part = makePart(period*1.1);
	
	var maker = new GridMaker();
	var trans = new CompositeTransform();
	trans.add(symm);
	trans.add(new Scale(0.85));
  
	
	maker.setSource(part);
	maker.setTransform(trans);
	
	maker.makeGrid(grid);
	meshSmoothingWidth = 0;
	return grid;
	
}
