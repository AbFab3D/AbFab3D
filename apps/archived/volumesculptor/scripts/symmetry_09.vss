//
// Example of generalized kaleidoscope. The idea is similar to traditional kaleidoscope, 
// which consists of 3 flat mirrors with dihedral angles 60 degree. One can place an arbitrary objects inside of 
// such kaleidoscope and reflections in the mirrors create infinite repeating pattern. 	
// Here in addition to usual flat mirrors we use spherical mirrors. "Reflections" in spherical mirrors are 
// inversion in the spheres. 
// If dihedral angles between spheres and planes is integer submultiple of the half turn (PI or 180 degrees) 
// the reflections in such mirros form regular pattern. 
// The type of pattern created by such kaleidoscope can be wildly complex. 
// In this case we have 4 mirrors: 2 flat mirros and 2 spherical mirrors. The mirrors are placed in such a ways, that 
// the pattern scales down near the boundary of a disk. It resembles a tiling of 2D hyperbolic plane in Poincare disk model 
// with important difference that our pattern is three dimensional. 
//
	
	
var voxelSize = 0.2*MM;

function getQuad_1( r, r1, alpha){

	var r2 = r*r/(r1*Math.cos(alpha));
	var x1 = Math.sqrt(r1*r1 + r*r);
	var y2 = Math.sqrt(r2*r2 + r*r);

	print("x1:", x1/MM);
	print("r1:", r1/MM);
	print("y2:", y2/MM);
	print("r2:", r2/MM);
	
	var splanes = new Array();
	var count = 0;
	splanes[count++] = new ReflectionSymmetry.getPlane(new Vector3d(0,-1,0), 0.);
	splanes[count++] = new ReflectionSymmetry.getPlane(new Vector3d(-1,0,0), 0.);
	splanes[count++] = new ReflectionSymmetry.getSphere(new Vector3d(x1,0,0), -r1);
	splanes[count++] = new ReflectionSymmetry.getSphere(new Vector3d(0,y2,0), -r2);
	
	return splanes;
	
}

function getQuad_2( r1,  r2,  x1,  alpha){

    var y2 = Math.sqrt(r1*r1 + r2*r2 + 2*r1*r2*Math.cos(alpha) - x1*x1);

	print("x1:", x1/MM);
	print("r1:", r1/MM);

	print("y2:", y2/MM);
	print("r2:", r2/MM);
	
	var splanes = new Array();
	var count = 0;
	splanes[count++] = new ReflectionSymmetry.getPlane(new Vector3d(0,-1,0), 0.);
	splanes[count++] = new ReflectionSymmetry.getPlane(new Vector3d(-1,0,0), 0.);
	splanes[count++] = new ReflectionSymmetry.getSphere(new Vector3d(x1,0,0), -r1);
	splanes[count++] = new ReflectionSymmetry.getSphere(new Vector3d(0,y2,0), -r2);
	
	return splanes;
	
}

function makePart(size, thickeness){

  var union = new Union();
  
  var boxX = new Box(0,0,0,thickeness, thickeness, size);
  union.add(boxX);  
  boxX.setTransform(new Rotation(new Vector3d(-1,1,0), 3*Math.PI/8));	
  return union;
}

function makePart_g(size, thickness, voxelSize){

  //var t = (thickness/2) * 1.5;
  //var s = size/2;
  //var g = createGrid(-t, t, -t, t, -s, s,voxelSize);
  var b = size/2;
  var g = createGrid(-b*0.1,b,-0.1*b,b,-b*0.7,b*0.7,voxelSize);
  
  //var boxZ = new Box(0,0,0,thickness, thickness, size);
  
  var mm = new GridMaker();
  mm.setSource(makePart(size, thickness));
  mm.setMaxAttributeValue(255);
  mm.makeGrid(g);
  
  var gmm = new GridMipMap(g);
  
  gmm.setScalingType(GridMipMap.SCALING_MAX);  
  gmm.setRepeatType(GridMipMap.REPEAT_NONE);
  gmm.setScalingType(GridMipMap.SCALING_MAX);  
  //gmm.setScalingType(GridMipMap.SCALING_AVERAGE);  

  return gmm;
  
}

function makeLimitSet(){

	var inter = new Intersection();
	inter.add(new LimitSet(1*MM, 0.007));
	//inter.add(new Sphere(5*MM,5*MM,3*MM,8*MM));
	inter.add(new Box(5*MM,5*MM,2*MM,15*MM, 15*MM, 10*MM));
	return inter;
}
function main(){

	var sx = 52*MM;
	var sz = 20*MM;
	
	var voxelSize = 0.1*MM;
		
	var cz = 20.0*MM;
	var cx = 5.0*MM;
	var cy = 5.0*MM;
	
	var r = 25*MM;
	var r1 = 30*MM;
	
	//var part = makePart_g(30*MM, 5*MM, voxelSize);	
	var union = new Union();
	//union.add(fd);
	union.add(makeLimitSet());
	var fd = makePart(30*MM, 5*MM);	
	union.add(fd);
	
	var dt = new DataTransformer();
	
	dt.setSource(union);	
	
	//var sym = new ReflectionSymmetry(getQuad_1(r, r1, Math.PI/3));
	var sym = new ReflectionSymmetry(getQuad_2(r, r1, 35*MM, Math.PI/3));
	
	sym.setIterations(50);
	
	dt.setTransform(sym);
	
    var maker = new GridMaker();
	maker.setSource(dt);
	
	var dest = createGrid(-sx/2,sx/2,-sx/2,sx/2,-sz/2, sz/2,voxelSize);
	
	maker.makeGrid(dest);
	
	return dest;
	
}
