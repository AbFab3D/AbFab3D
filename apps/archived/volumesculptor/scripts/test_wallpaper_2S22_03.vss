//bracelet with symmetical pattern 

var voxelSize = 0.1*MM;

function makeFD1( w, h, d, aspect, wireThickeness){

	var u = new Union();
	var ww = 0.75*w/2;
	var hh =0.75*h/2;
	var w4 = w/4;
	var h4 = h/4;

	var Rt0 = aspect*w;//0.38*w;
	var rt0 = wireThickeness/2;
	
	
	var t0 = new Torus(Rt0, rt0);
	t0.setTransform(new Translation(w/2, h/2,0));
	u.add(t0);

	var t0a = new Torus(Rt0, rt0);
	t0a.setTransform(new Translation(-w/2, -h/2,0));
	u.add(t0a);

	
	var t1 = new Torus(h-Rt0, rt0);
	var ct1 = new CompositeTransform();	
	ct1.add(new Rotation(0,1,0,Math.PI/2));
	ct1.add(new Translation(w/2, -h/2,0));
	t1.setTransform(ct1);
	u.add(t1);


	var c1 = new Cylinder(new Vector3d((w/2-Rt0),0,0), new Vector3d(0,0,0), rt0);
	c1.setTransform(new Translation(0, h/2,0));
	u.add(c1);
	
	var c2 = new Cylinder(new Vector3d(-w/2,0,0), new Vector3d(w/2,0,0), rt0);
	c2.setTransform(new Translation(w/2, -h/2,0));
	u.add(c2);
	
	return u;
}

function main(){

	var ringDiameter = 60*MM;
	var ringWidth = 20*MM;	
	var ringThickness = 8.5*MM;	
	var bandWidth = 1.*MM;  // width of solid on top and bottom 
	
	
	var wireThickness = 2.*MM;  // thickness of	wires 
	var aspect = 0.5;  // variation of pattern shape ( good values are between 0.3 and 0.6) 
	// these defines how many periods of pattern fit along bracelet 
	var periodsX = 10;  
	var periodsY = 11;
	// end of variable parameters 
	
	var ringRadius = ringDiameter/2;	
	var ringLength = ringDiameter*Math.PI;
	
	
	
	
	var cellSize = 0.5*ringLength/Math.sqrt(periodsY*periodsY + periodsX*periodsX);
	var angle = Math.atan2(periodsY, periodsX);
		
	var width = ringDiameter + 2*ringThickness;		
	var height = ringWidth + 2*voxelSize;
	var depth = width;
	
	var fdHeight = cellSize;
	var fdWidth = fdHeight/2;
	
	var partWidth = 2*fdWidth;
	var partHeight = fdHeight;
	
	
	var w = width/2;
	var h = height/2;	
	var d = depth/2 + voxelSize;
	
	var grid = createGrid(-w, w, -h, h, -d, d,voxelSize);
	
	var fundamentalDomain = makeFD1(partWidth,partHeight,depth, aspect, wireThickness);
	
	var symm = new WallpaperSymmetry(WallpaperSymmetry.WP_2S22, fdWidth, fdHeight);	
	
	symm.setIterations(100);
	var ct = new CompositeTransform();
	ct.add(symm);
	ct.add(new Rotation(0,0,1, angle));
	ct.add(new Translation(0,0,ringThickness/2));
	ct.add(new RingWrap(ringRadius));
	
	fundamentalDomain.setTransform(ct);

	var dt = new DataTransformer();
	dt.setSource(fundamentalDomain);
	
	var inter = new Intersection();
	// make intersection to speed up calculations 
	inter.add(new Ring(ringRadius, ringThickness, -ringWidth/2+0.5*bandWidth, ringWidth/2-0.5*bandWidth));
	inter.add(fundamentalDomain);
	
	var maker = new GridMaker();	
	
	var union = new Union();
	
	union.add(inter);	
	union.add(new Ring(ringRadius, ringThickness, ringWidth/2 - bandWidth, ringWidth/2));
	union.add(new Ring(ringRadius, ringThickness, -ringWidth/2, -ringWidth/2 + bandWidth));
	
	maker.setSource(union);
	
	//maker.setTransform(symm);
	
	maker.makeGrid(grid);
	
	return grid;
	
}
